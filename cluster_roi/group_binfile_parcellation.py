from numpy import array
from scipy import *
from scipy.sparse import *
from python_ncut_lib import *

# group_img=group_binfile_parcellate( infiles, outfile, K,n_voxels ):
#
# This function performs group level clustering of individual level clustering
# results. Each single subject clustering is converted into a coincidence matrix
# W, where w_ij = 1 if voxels i and j are in the same cluster, and zero
# otherwise. Coincidence matrices are averaged across subjects and then
# submitted to normalized cut clustering to obtain K clusters.
#    infiles:   list of .NPY or .bin file containing single subject clustering
#               results. Each of these files is a 1D vector where the ith value
#               corresponds to the cluster assignment of voxel i. This assumes
#               that the vectors are in the same order. These files are
#               generated by binfile_parcellation.py
#    outfile:   the name of the output file, a n_voxels x 1 vector is written to
#               this file, where the ith value corresponds to the cluster to
#               which voxel i is assigned 
#    K:         The number of clusters that will be generated. This is a single
#               number. This assumes that each of the input files were clustered
#               to K
#    n_voxels:  Number of voxels in the _mask_ used to generate the subject
#               specific connectivity matrices
#    group_img: (output) n_voxels x 1 vector indicating cluster assignments 
def group_binfile_parcellate( infiles, outfile, K, n_voxels ):

    # read in all of the files, construct coincidence matrices, and average
    # them 
    for i in range(0,len(infiles)):

        # read in the files
        if infiles[i].endswith(".npy"):
            print("Reading",infiles[i],"as a npy filetype")
            imdat=load(infiles[i])
        else:
            print("Reading %s as a binary file of doubles"%(\
                infiles[i]))
            fid=open(infiles[i], 'rb')
            imdat=fromfile(fid)
            fid.close()

        # construct the coincidences between the voxels    
        sparse_i=[]
        sparse_j=[]
        for j in range(1,K+1):
            grp_ndx=nonzero(imdat==j)[0]
            ff=tile(grp_ndx,(len(grp_ndx),1))
            sparse_i=append(sparse_i,reshape(ff,prod(shape(ff))))
            sparse_j=append(sparse_j,reshape(ff.transpose(),prod(shape(ff))))

        # sum the coincidence matrices across input files    
        if i==0:
            W=csc_matrix((ones(len(sparse_i)),(sparse_i,sparse_j)),\
               (n_voxels,n_voxels),dtype=double)
        else:
            print('adding ',i)
            W=W+csc_matrix((ones(len(sparse_i)),(sparse_i,sparse_j)),\
                (n_voxels,n_voxels),dtype=double)

    # set the diagonal to zeros as is customary with affinity matrices
    W=W-spdiags(W.diagonal(),[0],n_voxels,n_voxels,"csc")
    print("diag is ",sum(W.diagonal()),"\n")

    # divide by the number of input files, to calculate the average     
    W=W/len(infiles)
    print("finished reading in data and calculating connectivity\n")

    # perform clustering

    
  
    eigenval,eigenvec = ncut(W,K)
    eigenvec_discrete = discretisation(eigenvec)

    ## write out the results
    group_img=eigenvec_discrete[:,0]

    for i in range(1,K):
    	if not i%10: print(i)
        group_img=group_img+(i+1)*eigenvec_discrete[:,i]

    save(outfile,group_img.todense())
    print("finished group parcellation\n")

    return array(group_img.todense())
