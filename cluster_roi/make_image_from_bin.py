import nibabel as nb
from numpy import *

"""
make_image_from_bin( image, binfile, mask )

Converts a NPY file generated by binfile_parcellation.py,
group_binfile_parcellation.py, or group_mean_binfile_parcellation.npy into a
nifti file where each voxels intensity corresponds to the number of the
cluster to which it belongs.
    image:   The name of the nifti file to be written.
    binfile: The binfile to be converted. The file contains a n_voxel x 1
             vector that is converted to a nifti file.
    mask:    Mask describing the space of the nifti file. This should
             correspond to the mask originally used to create the
             connectivity matrices used for parcellation.
"""

def make_image_from_bin( image, binfile, mask ):
    # read in the mask
    nim=nb.load(mask)
    # read in the binary data
    if( binfile.endswith(".npy") ):
        print("Reading",binfile,"as a npy filetype")
        a=load(binfile)
    else:
        print("Reading",binfile,"as a binary file of doubles")
        a=fromfile(binfile)
    imdat=nim.get_data()
    print("shape",shape(a))
    print("sum",sum(imdat))
    imdat=imdat.astype('int16')
    # map the binary data to mask
    mask_voxels=(imdat.flatten()>0).sum()
    print("shape2",shape(a[0:mask_voxels]))
    imdat[imdat>0]=short(a[0:mask_voxels].flatten())
    # write out the image as nifti
    thdr=nim.get_header()
    thdr['scl_slope']=1
    thdr.set_data_dtype('int16')
    nim_aff = nim.get_affine()
    nim_out = nb.Nifti1Image(imdat, nim_aff, thdr)
    #nim_out.set_data_dtype('int16')
    nim_out.to_filename(image)
