import nibabel as nb
from numpy import *

"""
make_image_from_bin_renum( image, binfile, mask ):

Converts a NPY file generated by binfile_parcellation.py,
group_binfile_parcellation.py, or group_mean_binfile_parcellation.npy into a
nifti file where each voxels intensity corresponds to the number of the
cluster to which it belongs. Clusters are renumberd to be contiguous.
    image:   The name of the nifti file to be written.
    binfile: The binfile to be converted. The file contains a n_voxel x 1
             vector that is converted to a nifti file.
    mask:    Mask describing the space of the nifti file. This should
             correspond to the mask originally used to create the
             connectivity matrices used for parcellation.
"""

def make_image_from_bin_renum( image, binfile, mask ):
    # read in the mask
    nim=nb.load(mask)
    # read in the binary data
    if( binfile.endswith(".npy") ):
        print("Reading",binfile,"as a npy filetype")
        a=load(binfile)
    else:
        print("Reading",binfile,"as a binary file of doubles")
        a=fromfile(binfile)
    unique_a=list(set(a.flatten()))
    unique_a.sort()
    # renumber clusters to make the contiguous
    b=zeros((len(a),1))
    for i in range(0,len(unique_a)):
        b[a==unique_a[i]]=i+1
    imdat=nim.get_data()
    imdat=imdat.astype('int16')
    # map the binary data to mask
    imdat[imdat>0]=1
    imdat[imdat>0]=short(b[0:sum(imdat)].flatten())
    # Get the mask header and change the dtype
    nim_head = nim.get_header()
    nim_head.set_data_dtype('int16')
    # write out the image as nifti
    nim_out = nb.Nifti1Image(imdat, nim.get_affine(), nim_head)
    #nim_out.set_data_dtype('int16')
    nim_out.to_filename(image)
